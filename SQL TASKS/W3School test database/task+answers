This is a link to the database: https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_all

This is the task:
 
1. Отобразить в результате всех поставщиков, которые находятся в городе с именем, начинающимся на "S", но не в стране начинающейся на "S".
2. Вывести в алфавитном порядке все города из базы находящиеся не в Германии не во Франции и не в Англии.
3. Выбрать информацию о сотрудниках в алфавитном порядке по Фамилии и Имени, которые имеют степень бакалавра гуманитарных наук.
4. Вставить запись о новом клиенте двумя способами:
 	a. Указать уникальный идентификатор в запросе
	b. Не указывать явно уникальный идентификатор в запросе, идентификатор должен генерироваться автоматически.
5. Сделать апдейт любой записи в базе.
6. Сделать удаление записи из любой таблицы.
7. Вывести имена всех людей, которые покупали морские продукты.
8. Вывести имя клиента и количество совершенных им покупок.
9. Вывести имена и ID пяти самых покупаемых продуктов. А также сколько их было продано.
10. Покажите сколько заказов было сделано каждым грузоотправителем. Отобразите имена грузоотправителей и количество выполненных ими заказов.
11*. Получить имена клиентов и средний чек заказов, который сумма которого составляет от 1000 долларов(включительно).  Среднюю сумму заказа необходимо округлить до двух сотых.


My answers:

Прикрепляю ответы к заданию.

1.
SELECT * FROM Suppliers
WHERE SupplierName LIKE 'S%'
AND Country NOT LIKE 'S%';

2.          
SELECT city, country FROM customers
WHERE NOT country = 'Germany' AND NOT country='France' AND NOT country='UK';
UNION
SELECT city, country FROM suppliers
WHERE NOT country = 'Germany' AND NOT country='France' AND NOT country='UK'
ORDER BY city ASC;

3.
SELECT * FROM Employees
WHERE notes LIKE '% BA %'
order by LastName ASC;


4.a
INSERT INTO Customers (CustomerID, CustomerName, ContactName, Address, City, PostalCode, Country)
VALUES (194, 'Grzegorz', 'Brzyndrzyszczykiewicz', 'ulica Armii Krajowej 156', 'Warszawa', '01-002', 'Poland');

4.b
INSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country)
VALUES ('Tomasz', 'Byczkowiec', 'Białoruska 43', 'Białystok', '06-123', 'Poland');

5.
UPDATE customers
SET CustomerName = 'Greg'
WHERE CustomerID = 1;

6.
DELETE FROM customers
WHERE CustomerID = 1;

7.
SELECT DISTINCT Customers.CustomerName, Products.ProductName, Products.CategoryID, Categories.CategoryName
FROM Orders
INNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID
INNER JOIN OrderDetails ON Orders.OrderID = OrderDetails.OrderID
INNER JOIN Products ON OrderDetails.ProductID = Products.ProductID
INNER JOIN Categories ON Products.CategoryID = Categories.CategoryID
where Categories.CategoryID = '8';

8.
SELECT Customers.CustomerName, Count(Customers.CustomerName) as OrdersQuantity
FROM Orders
INNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID
INNER JOIN OrderDetails ON Orders.OrderID = OrderDetails.OrderID
where Customers.customerid = '7';

9.
SELECT  DISTINCT products.productName,  products.productID, OrderDetails.Quantity
from products
inner join orderdetails on orderdetails.productid = products.productid
order by OrderDetails.Quantity DESC
LIMIT 5;

10.
SELECT shippers.shipperID, shippers.shipperName, count (orders.orderid) as QuantityOfOrdersShipped
FROM Shippers
join orders on orders.shipperID = shippers.shipperID
group by shippers.shipperID;

11*.
SELECT Customers.ContactName, ROUND(AVG(SeparateCustomerOrderInfo.OrderTotalAmount), 2) AS AverageOrderAmount
FROM Customers
     JOIN Orders on orders.CustomerID = customers.customerID
     JOIN (
         SELECT OrderDetails.OrderID, OrderDetails.Quantity*Products.Price AS OrderTotalAmount
           FROM OrderDetails
           JOIN Products ON orderDetails.ProductID = products.ProductID
           )
     SeparateCustomerOrderInfo on orders.OrderID = SeparateCustomerOrderInfo.orderID
GROUP BY Customers.CustomerName
HAVING AVG(SeparateCustomerOrderInfo.OrderTotalAmount) >= 1000
ORDER BY AverageOrderAmount DESC;
 